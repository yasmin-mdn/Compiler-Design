# Generated from E:/uni/term6/compiler/3\IP2.g4 by ANTLR 4.9.1
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\5")
        buf.write("\u009b\b\1\4\2\t\2\4\3\t\3\4\4\t\4\3\2\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3")
        buf.write("\2\5\2\u0089\n\2\3\3\5\3\u008c\n\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\5\3\u0098\n\3\3\4\3\4\2\2\5\3\3\5")
        buf.write("\4\7\5\3\2\13\3\2\62;\3\2\63;\3\2\64;\3\2\628\3\2\62\63")
        buf.write("\3\2\62\67\3\2\66;\3\2\62\66\3\2\65;\2\u00b0\2\3\3\2\2")
        buf.write("\2\2\5\3\2\2\2\2\7\3\2\2\2\3\u0088\3\2\2\2\5\u0097\3\2")
        buf.write("\2\2\7\u0099\3\2\2\2\t\u0089\3\2\2\2\n\13\t\2\2\2\13\f")
        buf.write("\5\7\4\2\f\r\5\5\3\2\r\u0089\3\2\2\2\16\17\7\63\2\2\17")
        buf.write("\20\t\3\2\2\20\21\3\2\2\2\21\22\5\7\4\2\22\23\5\5\3\2")
        buf.write("\23\u0089\3\2\2\2\24\25\t\4\2\2\25\26\t\2\2\2\26\27\3")
        buf.write("\2\2\2\27\30\5\7\4\2\30\31\5\5\3\2\31\u0089\3\2\2\2\32")
        buf.write("\33\7\63\2\2\33\34\t\5\2\2\34\35\t\2\2\2\35\36\3\2\2\2")
        buf.write("\36\37\5\7\4\2\37 \5\5\3\2 \u0089\3\2\2\2!\"\7\63\2\2")
        buf.write("\"#\79\2\2#$\t\6\2\2$%\3\2\2\2%&\5\7\4\2&\'\5\5\3\2\'")
        buf.write("\u0089\3\2\2\2()\7\63\2\2)*\79\2\2*+\7\64\2\2+,\7\60\2")
        buf.write("\2,-\3\2\2\2-\u0089\t\2\2\2./\7\63\2\2/\60\79\2\2\60\61")
        buf.write("\7\64\2\2\61\62\7\60\2\2\62\63\7\63\2\2\63\64\3\2\2\2")
        buf.write("\64\u0089\t\7\2\2\65\66\7\63\2\2\66\67\79\2\2\678\7\64")
        buf.write("\2\289\7\60\2\29:\7\65\2\2:;\3\2\2\2;\u0089\t\4\2\2<=")
        buf.write("\7\63\2\2=>\79\2\2>?\7\64\2\2?@\7\60\2\2@A\3\2\2\2AB\t")
        buf.write("\b\2\2B\u0089\t\2\2\2CD\7\63\2\2DE\79\2\2EF\7\64\2\2F")
        buf.write("G\7\60\2\2GH\7\63\2\2HI\3\2\2\2IJ\t\2\2\2J\u0089\t\2\2")
        buf.write("\2KL\7\63\2\2LM\79\2\2MN\7\64\2\2NO\7\60\2\2OP\7\64\2")
        buf.write("\2PQ\3\2\2\2QR\t\t\2\2R\u0089\t\2\2\2ST\7\63\2\2TU\79")
        buf.write("\2\2UV\7\64\2\2VW\7\60\2\2WX\7\64\2\2XY\3\2\2\2YZ\7\67")
        buf.write("\2\2Z\u0089\t\7\2\2[\\\7\63\2\2\\]\79\2\2]^\t\n\2\2^_")
        buf.write("\3\2\2\2_`\5\7\4\2`a\5\5\3\2a\u0089\3\2\2\2bc\7\63\2\2")
        buf.write("cd\7:\2\2de\3\2\2\2ef\t\2\2\2fg\3\2\2\2gh\5\7\4\2hi\5")
        buf.write("\5\3\2i\u0089\3\2\2\2jk\7\63\2\2kl\7;\2\2lm\3\2\2\2mn")
        buf.write("\t\6\2\2no\3\2\2\2op\5\7\4\2pq\5\5\3\2q\u0089\3\2\2\2")
        buf.write("rs\7\63\2\2st\7;\2\2tu\3\2\2\2uv\t\n\2\2vw\3\2\2\2wx\5")
        buf.write("\7\4\2xy\5\5\3\2y\u0089\3\2\2\2z{\7\64\2\2{|\t\t\2\2|")
        buf.write("}\t\2\2\2}~\3\2\2\2~\177\5\7\4\2\177\u0080\5\5\3\2\u0080")
        buf.write("\u0089\3\2\2\2\u0081\u0082\7\64\2\2\u0082\u0083\7\67\2")
        buf.write("\2\u0083\u0084\t\7\2\2\u0084\u0085\3\2\2\2\u0085\u0086")
        buf.write("\5\7\4\2\u0086\u0087\5\5\3\2\u0087\u0089\3\2\2\2\u0088")
        buf.write("\t\3\2\2\2\u0088\n\3\2\2\2\u0088\16\3\2\2\2\u0088\24\3")
        buf.write("\2\2\2\u0088\32\3\2\2\2\u0088!\3\2\2\2\u0088(\3\2\2\2")
        buf.write("\u0088.\3\2\2\2\u0088\65\3\2\2\2\u0088<\3\2\2\2\u0088")
        buf.write("C\3\2\2\2\u0088K\3\2\2\2\u0088S\3\2\2\2\u0088[\3\2\2\2")
        buf.write("\u0088b\3\2\2\2\u0088j\3\2\2\2\u0088r\3\2\2\2\u0088z\3")
        buf.write("\2\2\2\u0088\u0081\3\2\2\2\u0089\4\3\2\2\2\u008a\u008c")
        buf.write("\t\2\2\2\u008b\u008a\3\2\2\2\u008b\u008c\3\2\2\2\u008c")
        buf.write("\u008d\3\2\2\2\u008d\u0098\t\2\2\2\u008e\u008f\7\64\2")
        buf.write("\2\u008f\u0090\t\t\2\2\u0090\u0098\t\2\2\2\u0091\u0092")
        buf.write("\7\64\2\2\u0092\u0093\7\67\2\2\u0093\u0098\t\7\2\2\u0094")
        buf.write("\u0095\7\63\2\2\u0095\u0096\t\2\2\2\u0096\u0098\t\2\2")
        buf.write("\2\u0097\u008b\3\2\2\2\u0097\u008e\3\2\2\2\u0097\u0091")
        buf.write("\3\2\2\2\u0097\u0094\3\2\2\2\u0098\6\3\2\2\2\u0099\u009a")
        buf.write("\7\60\2\2\u009a\b\3\2\2\2\6\2\u0088\u008b\u0097\2")
        return buf.getvalue()


class IP2Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    FirstTwo = 1
    Octet = 2
    Dot = 3

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'.'" ]

    symbolicNames = [ "<INVALID>",
            "FirstTwo", "Octet", "Dot" ]

    ruleNames = [ "FirstTwo", "Octet", "Dot" ]

    grammarFileName = "IP2.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


